[{"C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\index.jsx":"1","C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\App.jsx":"2","C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\views\\Signup.jsx":"3","C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\views\\Login.jsx":"4","C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\views\\Dashboard.jsx":"5","C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\components\\Header.jsx":"6","C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\components\\Reminder.jsx":"7","C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\components\\AuthForm.jsx":"8","C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\components\\ErrorAlert.jsx":"9","C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\components\\Container.jsx":"10"},{"size":220,"mtime":1607971927542,"results":"11","hashOfConfig":"12"},{"size":365,"mtime":1608135646742,"results":"13","hashOfConfig":"12"},{"size":1755,"mtime":1608068409659,"results":"14","hashOfConfig":"12"},{"size":1736,"mtime":1608068404588,"results":"15","hashOfConfig":"12"},{"size":3149,"mtime":1608129539047,"results":"16","hashOfConfig":"12"},{"size":1188,"mtime":1608088877870,"results":"17","hashOfConfig":"12"},{"size":734,"mtime":1608069415420,"results":"18","hashOfConfig":"12"},{"size":1761,"mtime":1608136000592,"results":"19","hashOfConfig":"12"},{"size":362,"mtime":1608060549576,"results":"20","hashOfConfig":"12"},{"size":1960,"mtime":1608135645368,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ywlwjp",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\index.jsx",[],"C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\App.jsx",[],"C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\views\\Signup.jsx",["47","48"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Button, Form } from 'antd';\nimport AuthForm from '../components/AuthForm';\nimport ErrorAlert from '../components/ErrorAlert';\n\nconst Signup = (props) => {\n  const { handleLoggedUpdate, handleUserIdUpdate } = props;\n  const [errorMessage, setErrorMessage] = useState('');\n  const history = useHistory();\n  const [form] = Form.useForm();\n\n  const onFinish = async (values) => {\n    const { email, password } = values;\n    const response = await fetch('http://localhost:8888/signup', {\n      credentials: 'include',\n      body: JSON.stringify({\n        email,\n        password,\n      }),\n      headers: { 'content-type': 'application/json' },\n      method: 'POST',\n    });\n    const body = await response.json();\n    if (body.success) {\n      console.log(body);\n      handleLoggedUpdate(true);\n      handleUserIdUpdate(body.userId);\n      // navigate directly to the Dashboard\n      history.push('/dashboard');\n    } else {\n      setErrorMessage(body.errorMessage);\n      form.resetFields();\n      console.log(body.errorMessage);\n    }\n  };\n  return (\n    <div className=\"login-container\">\n      <h1>Signup</h1>\n      <AuthForm form={form} onFinish={onFinish} submitValue=\"Sign up\" validatePassword />\n      {errorMessage && (<ErrorAlert errorMessage={errorMessage} />)}\n      <div className=\"auth-redirect\">\n        <p> Already have an account? :</p>\n        <Button type=\"link\">\n          <Link to=\"/login\">Login</Link>\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nSignup.propTypes = {\n  handleLoggedUpdate: PropTypes.func.isRequired,\n  handleUserIdUpdate: PropTypes.func.isRequired,\n};\n\nexport default Signup;\n",["49","50","51","52","53","54"],"C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\views\\Login.jsx",["55","56"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Button, Form } from 'antd';\nimport AuthForm from '../components/AuthForm';\nimport ErrorAlert from '../components/ErrorAlert';\n\nconst Login = (props) => {\n  const { handleLoggedUpdate, handleUserIdUpdate } = props;\n  const [errorMessage, setErrorMessage] = useState('');\n  const history = useHistory();\n  const [form] = Form.useForm();\n\n  const onFinish = async (values) => {\n    const { email, password } = values;\n    const response = await fetch('http://localhost:8888/login', {\n      credentials: 'include',\n      body: JSON.stringify({\n        email,\n        password,\n      }),\n      headers: { 'content-type': 'application/json' },\n      method: 'POST',\n    });\n    const body = await response.json();\n    if (body.success) {\n      console.log(body);\n      handleLoggedUpdate(true);\n      handleUserIdUpdate(body.userId);\n      // navigate directly to the Dashboard\n      history.push('/dashboard');\n    } else {\n      console.log(body.errorMessage);\n      setErrorMessage(body.errorMessage);\n      form.resetFields();\n    }\n  };\n\n  return (\n    <div className=\"login-container\">\n      <h1>Login</h1>\n      <AuthForm form={form} onFinish={onFinish} submitValue=\"Log in\" />\n      {errorMessage && (<ErrorAlert errorMessage={errorMessage} />)}\n      <div className=\"auth-redirect\">\n        <p> Don&apos;t have an account yet? :</p>\n        <Button type=\"link\">\n          <Link to=\"/\">Signup</Link>\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nLogin.propTypes = {\n  handleLoggedUpdate: PropTypes.func.isRequired,\n  handleUserIdUpdate: PropTypes.func.isRequired,\n};\n\nexport default Login;\n","C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\views\\Dashboard.jsx",["57","58","59"],"import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Divider, Input } from 'antd';\nimport Reminder from '../components/Reminder';\n\nconst Dashboard = (props) => {\n  const { userId } = props;\n  const [reminders, setReminders] = useState([]);\n  const [newReminderValue, setNewReminderValue] = useState('');\n\n  const getReminders = async (id) => {\n    if (!id) { return null; }\n    const response = await fetch('http://localhost:8888/reminders', {\n      method: 'POST',\n      body: JSON.stringify({ id }),\n      headers: { 'content-type': 'application/json' },\n    });\n    const body = await response.json();\n    if (body.success) {\n      setReminders(body.reminders);\n    }\n    console.log(body);\n    return null;\n  };\n\n  const handleDeleteReminder = async (id) => {\n    const response = await fetch('http://localhost:8888/delete-reminder', {\n      method: 'POST',\n      body: JSON.stringify({ id }),\n      headers: { 'content-type': 'application/json' },\n    });\n    const body = await response.json();\n    if (body.success) {\n      // filter the current Reminders to remove whichever one was successfully deleted\n      const filtered = reminders.filter((reminder) => reminder.id !== id);\n      setReminders(filtered);\n    }\n    console.log(body);\n  };\n\n  const handleAddReminder = async () => {\n    // ensure that there is at least a word character or a digit\n    // prevents users from sending reminders that look empty ie '\\n'\n    const regex = /[\\w\\d]/;\n    const found = newReminderValue.match(regex);\n    if (!found) { return null; }\n    const response = await fetch('http://localhost:8888/add-reminder', {\n      method: 'POST',\n      body: JSON.stringify({ reminder: newReminderValue.trim(), userId }),\n      headers: { 'content-type': 'application/json' },\n    });\n    const body = await response.json();\n    if (body.success) {\n      // add the newly stored Reminder to the reminders in the State\n      setReminders([...reminders, body.reminder]);\n      setNewReminderValue('');\n    }\n    console.log(body);\n    return null;\n  };\n\n  useEffect(() => {\n    getReminders(userId);\n  }, [userId]);\n\n  return (\n    <div>\n      <h1 className=\"dashboard-header\">Dashboard</h1>\n      <div className=\"dashboard-add-reminder\">\n        <Input.TextArea\n          showCount\n          maxLength={140}\n          onChange={(e) => setNewReminderValue(e.target.value)}\n          placeholder=\"Add a new reminder ...\"\n          rows={4}\n          value={newReminderValue}\n        />\n        <Button\n          onClick={handleAddReminder}\n          type=\"default\"\n        >\n          Add reminder!\n        </Button>\n      </div>\n      <Divider />\n      <div className=\"dashboard-reminder-container\">\n        {reminders && reminders.map((item) => (\n          <Reminder\n            deleteReminder={handleDeleteReminder}\n            id={item.id}\n            key={`dashboard-reminder-${item.id}`}\n            text={item.reminder}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nDashboard.defaultProps = {\n  userId: null,\n};\n\nDashboard.propTypes = {\n  userId: PropTypes.number,\n};\n\nexport default Dashboard;\n","C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\components\\Header.jsx",["60"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { Button } from 'antd';\nimport {\n  LogoutOutlined, ReadFilled,\n} from '@ant-design/icons';\n\nconst Header = (props) => {\n  const { handleLoggedUpdate, isLoggedIn } = props;\n  const history = useHistory();\n\n  const logoutSubmit = async () => {\n    const response = await fetch('http://localhost:8888/logout', {\n      credentials: 'include',\n      method: 'POST',\n    });\n    const body = await response.json();\n    if (body.success) {\n      handleLoggedUpdate(false);\n      history.push('/login');\n    }\n    console.log(body);\n  };\n\n  return (\n    <div className=\"app-header\">\n      <h1 className=\"app-header-title\">\n        Reminderizer!\n        {' '}\n        <ReadFilled />\n        {' '}\n      </h1>\n      {isLoggedIn && (\n      <Button\n        className=\"app-header-logout\"\n        onClick={logoutSubmit}\n        shape=\"circle\"\n        title=\"Log out\"\n      >\n        <LogoutOutlined />\n      </Button>\n      )}\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  handleLoggedUpdate: PropTypes.func.isRequired,\n  isLoggedIn: PropTypes.bool.isRequired,\n};\n\nexport default Header;\n","C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\components\\Reminder.jsx",[],"C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\components\\AuthForm.jsx",[],"C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\components\\ErrorAlert.jsx",[],"C:\\Users\\Sam\\code\\volume7\\reminderizer\\client\\src\\components\\Container.jsx",[],{"ruleId":"61","severity":1,"message":"62","line":27,"column":7,"nodeType":"63","messageId":"64","endLine":27,"endColumn":18},{"ruleId":"61","severity":1,"message":"62","line":35,"column":7,"nodeType":"63","messageId":"64","endLine":35,"endColumn":18},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"61","severity":1,"message":"62","line":27,"column":7,"nodeType":"63","messageId":"64","endLine":27,"endColumn":18},{"ruleId":"61","severity":1,"message":"62","line":33,"column":7,"nodeType":"63","messageId":"64","endLine":33,"endColumn":18},{"ruleId":"61","severity":1,"message":"62","line":22,"column":5,"nodeType":"63","messageId":"64","endLine":22,"endColumn":16},{"ruleId":"61","severity":1,"message":"62","line":38,"column":5,"nodeType":"63","messageId":"64","endLine":38,"endColumn":16},{"ruleId":"61","severity":1,"message":"62","line":58,"column":5,"nodeType":"63","messageId":"64","endLine":58,"endColumn":16},{"ruleId":"61","severity":1,"message":"62","line":23,"column":5,"nodeType":"63","messageId":"64","endLine":23,"endColumn":16},"no-console","Unexpected console statement.","MemberExpression","unexpected","lines-around-directive",["77"],"no-spaced-func",["78"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"padding-line-between-statements","func-call-spacing"]